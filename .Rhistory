downsdRScore = sd(downwithRScore$R)
#Significant position as defined by position R Score >= mean R score + 1/2 standard deviation of R scores
downisSigPos = downwithRScore%>%
dplyr::mutate(Significant = (R >=downmeanRScore+(0.5*downsdRScore)))
###CONTINUE PAM SCORE CALCULATIONS, NEED Hi AVERAGE and Havgdev
downHavg = sum(downisSigPos$Hi)/flankLength
downsigHi = c()
for(i in 1:flankLength){
if (downisSigPos$Significant[i] == TRUE){
downsigHi = append(downsigHi, downisSigPos$Hi[i], after= length(downsigHi))
}
}
downHavgdev = sum(abs((downsigHi-downHavg)))/sqrt(length(downsigHi)+1)
#downpamScore = sqrt(length(alignmentDown))*(1-downHavgdev)
#experimantal PAM Score
downpamfreqVec = c()
downpamRVec = c()
for (i in 1:flankLength){
if (downisSigPos$Significant[i] == TRUE){
downpamfreqVec = append(downpamfreqVec, paste(downisSigPos[i,apply(downisSigPos[i,2:5],1,function(x) which(x>0.25))+1]), after= length(downpamfreqVec))
for(j in 1:length(paste(downisSigPos[i,apply(downisSigPos[i,2:5],1,function(x) which(x>0.25))+1]))){
downpamRVec = append(downpamRVec, downisSigPos$R[i], after= length(downpamRVec))
}
}
}
downpamScore = length(alignmentDown)*(sum(as.numeric(downpamfreqVec)*as.numeric(downpamRVec))/(log2(4)*length(downsigHi)))
downpamSeq = c()
for (i in 1:flankLength){
if (downisSigPos$Significant[i] == TRUE){
downpamSeq = append(downpamSeq, sprintf("%s", paste(toupper(substr(colnames(downisSigPos)[apply(downisSigPos[i,2:5],1,function(x) which(x>0.25))+1],2,2)), collapse = "/"), after= length(downpamSeq)))
}
else {
downpamSeq = append(downpamSeq, "N", after= length(downpamSeq))
}
}
print(sprintf("%s %s with a PAM Score of: %s", paste(c("The downstream consensus PAM #",counter), collapse=""),paste(c( "is: ", downpamSeq), collapse=""), downpamScore))
#Plot upstream WebLogo and save
if(nrow(upnDown)>=1 && saveLogo == T){
ggplot()+geom_logo( as.character(toupper(alignmentUp)), seq_typ="DNA")+ annotate('text', x=ceiling(flankLength/2), y=2.1, label=sprintf("Consensus: %s Score: %s", paste(uppamSeq, collapse=""),round(uppamScore, digits = 2)), hjust = 0.5, size = 12)+theme_logo()+scale_x_discrete(name ="Position",limits=upstreamLabels)+theme(axis.text.x = element_text(size=32),axis.text.y = element_text(size=32), axis.title=element_text(size=48) ,axis.ticks = element_line(size = 1.5), axis.ticks.length = unit(20, "pt"))
ggsave(upstreamLogoOutput, width = 10, height = 7, units = "in")
#Plot downstream WebLogo
ggplot()+geom_logo( as.character(toupper(alignmentDown)), seq_typ="DNA")+ annotate('text', x=ceiling(flankLength/2), y=2, label=sprintf("Consensus: %s Score: %s", paste(downpamSeq, collapse=""),round(downpamScore, digits = 2)), hjust = 0.5, size = 12)+theme_logo()+scale_x_discrete(name ="Position",limits=downstreamLabels)+theme(axis.text.x = element_text(size=32),axis.text.y = element_text(size=32), axis.title=element_text(size=48) ,axis.ticks = element_line(size = 1.5), axis.ticks.length = unit(20, "pt"))
ggsave(downstreamLogoOutput, width = 10, height = 7, units = "in")
}
#Add filter data to data frame
collectionFrame$uniqueAligns[counter] = uniqueAligns
collectionFrame$excludeSelf[counter] = excludeSelf
collectionFrame$numGaps[counter] = numGaps
collectionFrame$e.value[counter] = e.value
collectionFrame$nucleotidesShorterThanProtospacer[counter] = nucleotidesShorterThanProtospacer
collectionFrame$queryStart[counter] = queryStart
collectionFrame$prophageOnly[counter] = prophageOnly
collectionFrame$Filter0[counter] = nrow(uniqueSet)
collectionFrame$Filter1[counter] = nrow(withoutself)
collectionFrame$Filter2[counter] = nrow(nogap)
collectionFrame$Filter3[counter] = nrow(lowEValue)
collectionFrame$Filter4[counter] = nrow(noshort)
collectionFrame$Filter5[counter] = nrow(seedonly)
collectionFrame$Filter6[counter] = nrow(isProphage)
collectionFrame$upPAM[counter] = paste(c(uppamSeq), collapse="")
collectionFrame$upScore[counter] = uppamScore
collectionFrame$downPAM[counter] = paste(c(downpamSeq), collapse="")
collectionFrame$downScore[counter] = downpamScore
counter = counter+1
Sys.sleep(3)
}
assign("collectionFrame", collectionFrame, envir= .GlobalEnv)
if(removeFASTA == T){
file.remove("eFetch FASTA.fasta")
}
if(savePAMSeqs == T){
assign("upstreamPAMSeqs", alignmentUp, envir= .GlobalEnv)
assign("downstreamPAMSeqs", alignmentDown, envir= .GlobalEnv)
}
}
system.time(join2PAM(joineddata,uniqueAlignsRange = c(T,F),excludeSelfRange = c(T,F),numGapsRange = c(0,3),e.valueRange = c(0.05, 1), nucleotidesShorterThanProtospacerRange = c(0,7), queryStartRange = c(1,7), flankLength =7))
library(roxygen2)
library(devtools)
document()
setwd(..)
setwd("..")
install("Spacer2PAM")
install("Spacer2PAM")
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(roxygen2)
install.packages("roxygen2")
library(roxygen2)
setwd("..")
install("Spacer2PAM")
install.packages("statmod")
install.packages("statmod")
install("Spacer2PAM")
install("Spacer2PAM")
install("Spacer2PAM")
install("Spacer2PAM")
library(devtools)
library(roxygen2)
install("Spacer2PAM")
library(Spacer2PAM)
setCRISPRInfo(genus = "Bacillus", species = "halodurans", strain = "C-125", crisprSystemNumber = "1")
setwd("~/Desktop/Spacer2PAM Dummy Data")
spacerDF = read.csv(file = "Bacillus halodurans C-125 protospacers with repeat.csv")
df2fasta(spacerDF)
library(devtools)
library(roxygen2)
setwd("~/Desktop/Spacer2PAM")
document()
setwd("..")
install("Spacer2PAM")
setCRISPRInfo(genus = "Bacillus", species = "halodurans", strain = "C-125", crisprSystemNumber = "1")
setwd("~/Desktop/Spacer2PAM Dummy Data")
spacerDF = read.csv(file = "Bacillus halodurans C-125 protospacers with repeat.csv")
df2fasta(spacerDF)
library(devtools)
library(roxygen2)
setwd("~/Desktop/Spacer2PAM")
document()
setwd("..")
install("Spacer2PAM")
setCRISPRInfo(genus = "Bacillus", species = "halodurans", strain = "C-125", crisprSystemNumber = "1")
setwd("~/Desktop/Spacer2PAM Dummy Data")
spacerDF = read.csv(file = "Bacillus halodurans C-125 protospacers with repeat.csv")
df2fasta(spacerDF)
fasta2df(fastaFile = "Bacillus halodurans C-125 System 1spacers.fasta", arrayNumbers = c(1,2,3,4,5), arrayLengths = c(15,16,14,35,10), arrayOrientations = c("Forward","Forward","Forward","Forward","Forward"), arrayRepeats = c("GTCGCACTCTACATGAGTGCGTGGATTGAAAT","GTCGCACTCTACATGAGTGCGTGGATTGAAAT","GTCGCACTCTACATGAGTGCGTGGATTGAAAT","GTCGCACTCTACATGAGTGCGTGGATTGAAAT","GTCGCACTCTACATGAGTGCGTGGATTGAAAT"), spacerDataFrameName = "Bacillus halodurans C-125 System 1 Spacers")
View(`Bacillus halodurans C-125 System 1 Spacers`)
Spacer2PAM::alignmentCSV2DF("B halodurans C-125-Alignment-HitTable.csv")
joinSpacerDFandAlignmentDF(alignmentDF = Spacer2PAM::alignmentCSV2DF("B halodurans C-125-Alignment-HitTable.csv"), spacerDF = 'Bacillus halodurans C-125 System 1 Spacers', accessionDatabaseLocation = file.choose())
joinSpacerDFandAlignmentDF(alignmentDF = Spacer2PAM::alignmentCSV2DF("B halodurans C-125-Alignment-HitTable.csv"), spacerDF = `Bacillus halodurans C-125 System 1 Spacers`, accessionDatabaseLocation = file.choose())
Spacer2PAM::join2PAM(joinedData = joineddata)
Spacer2PAM::join2PAM(joinedData = joineddata, flankLength = 10)
submit2Phaster()
submit2Phaster(joinedData = joineddata)
#' Submits Alignment Hits for Prophage Prediction
#'
#' This function allows you to submit the accession numbers of organisms identified by BLAST alignment to Phaster for prophage prediction. This process can take a bit of time to run and depends on the number of sequences being submitted.
#' @param joinedData A dataframe containing the joined spacer and alignment information. Defaults to joineddata, the output of the joinSpacerDFandAlignmentDF function.
#' @param startPosition A value to indicate where in the list of accession numbers to start. Defaults to 1.
#' @export
#' @examples
#' submit2Phaster()
submit2Phaster = function(joinedData = joineddata, startPosition = 1){
totalAccList = unique(joinedData$subject.acc.ver)
for (i in startPosition:length(totalAccList)){
if(i %% 8==0){
print("60 sec pause to prevent Phaster Server Overload")
print(sprintf("%s / %s Submitted", i, length(totalAccList)))
Sys.sleep(60)
}
if(i %% 32==0){
print("additional 75 sec pause to prevent Phaster Server Overload")
Sys.sleep(75)
}
if(i %% 64==0){
print("additional 60 sec pause to prevent Phaster Server Overload")
Sys.sleep(60)
}
#submit accession number to phaster.ca using API
GET(url = sprintf("phaster.ca/phaster_api?acc=%s", totalAccList[i]))
}
}
submit2Phaster(joinedData = joineddata)
submit2Phaster = function(joinedData = joineddata, startPosition = 1){
totalAccList = unique(joinedData$subject.acc.ver)
print(totalAccList)
for (i in startPosition:length(totalAccList)){
if(i %% 8==0){
print("60 sec pause to prevent Phaster Server Overload")
print(sprintf("%s / %s Submitted", i, length(totalAccList)))
Sys.sleep(60)
}
if(i %% 32==0){
print("additional 75 sec pause to prevent Phaster Server Overload")
Sys.sleep(75)
}
if(i %% 64==0){
print("additional 60 sec pause to prevent Phaster Server Overload")
Sys.sleep(60)
}
#submit accession number to phaster.ca using API
GET(url = sprintf("phaster.ca/phaster_api?acc=%s", totalAccList[i]))
}
}
submit2Phaster(joinedData = joineddata)
submit2Phaster = function(joinedData = joineddata, startPosition = 1){
totalAccList = unique(joinedData$subject.acc.ver)
for (i in startPosition:length(totalAccList)){
print(totalAccList[i])
if(i %% 8==0){
print("60 sec pause to prevent Phaster Server Overload")
print(sprintf("%s / %s Submitted", i, length(totalAccList)))
Sys.sleep(60)
}
if(i %% 32==0){
print("additional 75 sec pause to prevent Phaster Server Overload")
Sys.sleep(75)
}
if(i %% 64==0){
print("additional 60 sec pause to prevent Phaster Server Overload")
Sys.sleep(60)
}
#submit accession number to phaster.ca using API
GET(url = sprintf("phaster.ca/phaster_api?acc=%s", totalAccList[i]))
}
}
submit2Phaster(joinedData = joineddata)
GET(url = sprintf("phaster.ca/phaster_api?acc=%s", "MK932884.1"))
GET(url = "phaster.ca/phaster_api?acc=MK932884.1")
GET(url = "http://phaster.ca/phaster_api?acc=MK932884.1")
submit2Phaster = function(joinedData = joineddata, startPosition = 1){
totalAccList = unique(joinedData$subject.acc.ver)
for (i in startPosition:length(totalAccList)){
if(i %% 8==0){
print("60 sec pause to prevent Phaster Server Overload")
print(sprintf("%s / %s Submitted", i, length(totalAccList)))
Sys.sleep(60)
}
if(i %% 32==0){
print("additional 75 sec pause to prevent Phaster Server Overload")
Sys.sleep(75)
}
if(i %% 64==0){
print("additional 60 sec pause to prevent Phaster Server Overload")
Sys.sleep(60)
}
#submit accession number to phaster.ca using API
GET(url = sprintf("http://phaster.ca/phaster_api?acc=%s", totalAccList[i]))
}
}
submit2Phaster(joinedData = joineddata)
library(devtools)
library(roxygen2)
setwd("~/Desktop/Spacer2PAM")
document()
setwd("..")
intall("Spacer2PAM")
install("Spacer2PAM")
setwd("~/Desktop/Spacer2PAM Dummy Data")
joinSpacerDFandAlignmentDF(alignmentDF =alignmentCSV2DF("Bacillus halodurans C-125-Alignment-HitTable.csv"), spacerDF = read.csv(file = "Bacillus halodurans C-125 protospacers with Repeat.csv"), accessionDatabaseLocation = file.choose())
setCRISPRInfo(genus = "Bacillus", species = "halodurans", strain = "C-125", crisprSystemNumber = 1)
joinSpacerDFandAlignmentDF(alignmentDF =alignmentCSV2DF("Bacillus halodurans C-125-Alignment-HitTable.csv"), spacerDF = read.csv(file = "Bacillus halodurans C-125 protospacers with Repeat.csv"), accessionDatabaseLocation = file.choose())
joinSpacerDFandAlignmentDF(alignmentDF =alignmentCSV2DF("B halodurans C-125-Alignment-HitTable.csv"), spacerDF = read.csv(file = "Bacillus halodurans C-125 protospacers with Repeat.csv"), accessionDatabaseLocation = file.choose())
join2PAM(joinedData = joineddata, flankLength = 10)
join2PAM(joinedData = joineddata, prophageOnlyRange = T, flankLength = 10)
install.packages("chron")
library(chron)
dataFile = read.csv(file.choose(), header = TRUE, col.names = c("X", "Time", "Temperature","Well","RFU"))
dataFile = read.csv(file.choose(), header = TRUE, col.names = c("X", "Time", "Temperature","Well","RFU"))
truthTable = read.csv(file.choose(), header = TRUE)
joinedData = dataFile%>%
dplyr::left_join(truthTable,by="Well")%>%
na.omit()
View(joinedData)
setwd("~/Desktop")
Write.csv(joinedData, file = "20200205 sfGFP Expression Joined Data.csv")
write.csv(joinedData, file = "20200205 sfGFP Expression Joined Data.csv")
dataFile = read.csv(file.choose(), header = TRUE, col.names = c("X", "Time", "Temperature","Well","RFU"))
truthTable = read.csv(file.choose(), header = TRUE)
joinedData = dataFile%>%
dplyr::left_join(truthTable,by="Well")%>%
na.omit()
write.csv(joinedData, file = "20200128 MGA Expression Joined Data.csv")
surfResidues = c(('588', 'GLU'), ('13', 'G'), ('72', 'ASP'), ('840', 'ASP'), ('217', 'SER'), ('571', 'GLN'), ('909', 'ARG'), ('1283', 'GLU'), ('585', 'LYS'), ('666', 'GLN'), ('331', 'GLN'), ('464', 'LYS'), ('573', 'GLY'), ('-1', 'DC'), ('950', 'GLU'), ('837', 'ASP'), ('30', 'HIS'), ('624', 'THR'), ('1010', 'ALA'), ('630', 'ASN'), ('957', 'ALA'), ('12', 'C'), ('219', 'ARG'), ('410', 'GLN'), ('528', 'VAL'), ('93', 'ASN'), ('9', 'DT'), ('341', 'ARG'), ('212', 'ILE'), ('10', 'DG'), ('576', 'LYS'), ('39', 'GLU'), ('702', 'SER'), ('596', 'ASP'), ('257', 'LEU'), ('1217', 'ALA'), ('327', 'GLU'), ('154', 'HIS'), ('9', 'G'), ('469', 'SER'), ('832', 'HIS'), ('696', 'SER'), ('-13', 'DC'), ('369', 'LYS'), ('1174', 'ARG'), ('591', 'ASP'), ('1247', 'VAL'), ('815', 'LYS'), ('883', 'ASN'), ('529', 'GLU'), ('1', 'DT'), ('216', 'PRO'), ('33', 'GLU'), ('351', 'ALA'), ('706', 'ASP'), ('60', 'THR'), ('650', 'LYS'), ('268', 'GLU'), ('1297', 'ASP'), ('38', 'GLU'), ('291', 'THR'), ('966', 'ASP'), ('530', 'LYS'), ('75', 'ASN'), ('969', 'GLN'),
('1041', 'ASN'), ('459', 'LYS'), ('994', 'ASN'), ('1189', 'LYS'), ('793', 'SER'), ('82', 'SER'), ('143', 'LEU'), ('343', 'GLU'), ('-10', 'DA'), ('126', 'ALA'), ('360', 'ASP'), ('338', 'THR'), ('1305', 'LEU'), ('116', 'ASN'), ('270', 'GLY'), ('368', 'HIS'), ('146', 'LEU'), ('526', 'TYR'), ('1181', 'GLU'), ('667', 'LYS'), ('579', 'SER'), ('321', 'GLU'), ('104', 'ASN'), ('272', 'GLU'), ('820', 'ASP'), ('987', 'GLN'), ('1143', 'ASN'), ('688', 'THR'), ('694', 'ASP'), ('891', 'ARG'), ('855', 'SER'), ('20', 'A'), ('1067', 'ALA'), ('7', 'A'), ('350', 'GLU'), ('656', 'GLN'), ('1137', 'ASP'), ('171', 'GLY'), ('83', 'TYR'), ('562', 'LEU'), ('577', 'ALA'), ('92', 'ARG'), ('144', 'LYS'), ('524', 'LYS'), ('339', 'LEU'), ('583', 'THR'), ('174', 'GLU'), ('945', 'ASP'), ('224', 'ASN'), ('1307', 'ASN'), ('1258', 'TRP'), ('98', 'GLU'), ('827', 'TYR'), ('407', 'GLU'), ('653', 'LYS'), ('1231', 'ALA'), ('776', 'LYS'), ('1295', 'ASN'), ('1', 'MET'), ('425', 'SER'), ('547', 'ASN'), ('214', 'ALA'), ('196', 'ASP'), ('572', 'LYS
'), ('81', 'ASP'), ('717', 'LEU'), ('229', 'ILE'), ('-4', 'A'), ('1030', 'ASP'), ('233', 'VAL'), ('1034', 'GLU'), ('960', 'VAL'), ('649', 'GLU'), ('927', 'LEU'), ('631', 'ASN'), ('1245', 'ASN'), ('184', 'ASP'), ('17', 'G'), ('1149', 'ALA'), ('399', 'GLY'), ('-18', 'DC'), ('835', 'SER'), ('-12', 'DG'), ('1187', 'GLU'), ('400', 'LYS'), ('1244', 'LEU'), ('319', 'ILE'), ('1', 'G'), ('56', 'ARG'), ('1032', 'PRO'), ('152', 'THR'), ('816', 'THR'), ('1192', 'VAL'), ('847', 'PRO'), ('437', 'GLN'), ('641', 'GLU'), ('153', 'GLU'), ('771', 'PRO'), ('1084', 'VAL'), ('1128', 'GLY'), ('-7', 'U'), ('463', 'GLU'), ('151', 'THR'), ('433', 'GLU'), ('297', 'SER'), ('1287', 'LEU'), ('1132', 'PHE'), ('358', 'SER'), ('675', 'LYS'), ('234', 'SER'), ('492', 'VAL'), ('1118', 'LYS'), ('293', 'HIS'), ('324', 'LYS'), ('74', 'GLU'), ('859', 'ILE'), ('101', 'THR'), ('1260', 'MET'), ('406', 'LYS'), ('67', 'GLN'), ('11', 'G'), ('1110', 'THR'), ('10', 'U'), ('494', 'PRO'), ('723', 'PHE'), ('373', 'THR'), ('419', 'ASN'), ('303', 'ILE'),
('658', 'ALA'), ('121', 'ILE'), ('681', 'ARG'), ('94', 'ALA'), ('428', 'GLY'), ('1224', 'GLN'), ('965', 'LYS'), ('1086', 'LYS'), ('621', 'THR'), ('1255', 'ASN'), ('118', 'THR'), ('662', 'LYS'), ('670', 'ARG'), ('150', 'THR'), ('509', 'PRO'), ('-12', 'A'), ('854', 'VAL'), ('96', 'ILE'), ('381', 'HIS'), ('1180', 'ASN'), ('527', 'SER'), ('1072', 'LYS'), ('354', 'ASN'), ('391', 'GLU'), ('254', 'GLN'), ('665', 'ASP'), ('342', 'ASN'), ('-9', 'C'), ('948', 'GLU'), ('170', 'SER'), ('1210', 'HIS'), ('1089', 'LYS'), ('160', 'ARG'), ('1127', 'ARG'), ('328', 'GLU'), ('68', 'LEU'), ('1285', 'LYS'), ('1153', 'PRO'), ('4', 'A'), ('841', 'GLU'), ('1147', 'PHE'), ('623', 'THR'), ('525', 'PRO'), ('3', 'A'), ('22', 'ILE'), ('887', 'LYS'), ('440', 'SER'), ('468', 'LYS'), ('736', 'GLU'), ('772', 'GLU'), ('-8', 'DC'), ('1155', 'ILE'), ('457', 'THR'), ('87', 'LYS'), ('1090', 'ASN'), ('493', 'ASP'), ('-8', 'DG'), ('1152', 'THR'), ('1053', 'ALA'), ('635', 'PRO'), ('-10', 'DC'), ('248', 'GLN'), ('752', 'LYS'), ('335', 'LYS'), ('
380', 'ASP'), ('498', 'ALA'), ('1145', 'THR'), ('6', 'DG'), ('911', 'GLU'), ('396', 'GLU'), ('1033', 'ALA'), ('3', 'GLN'), ('-11', 'DC'), ('24', 'GLN'), ('139', 'ASN'), ('456', 'THR'), ('495', 'GLU'), ('19', 'C'), ('757', 'LYS'), ('651', 'GLU'), ('727', 'ALA'), ('486', 'VAL'), ('1183', 'ILE'), ('885', 'PRO'), ('925', 'LYS'), ('221', 'HIS'), ('441', 'GLU'), ('748', 'LYS'), ('448', 'ALA'), ('814', 'GLN'), ('325', 'SER'), ('163', 'ASP'), ('708', 'GLY'), ('560', 'ASN'), ('1050', 'THR'), ('28', 'LEU'), ('1232', 'THR'), ('637', 'GLU'), ('1130', 'PRO'), ('1254', 'GLN'), ('85', 'LYS'), ('465', 'GLU'), ('1109', 'LYS'), ('1121', 'ARG'), ('5', 'DG'), ('733', 'ASP'), ('466', 'ILE'), ('647', 'ASN'), ('813', 'ASP'), ('34', 'GLN'), ('1031', 'TYR'), ('1150', 'LYS'), ('161', 'SER'), ('705', 'LYS'), ('-1', 'DA'), ('1054', 'LYS'), ('156', 'ASN'), ('89', 'GLU'), ('1201', 'PRO'), ('1106', 'TYR'), ('866', 'SER'), ('290', 'GLU'), ('52', 'PRO'), ('401', 'ILE'), ('294', 'ILE'), ('949', 'LYS'), ('25', 'GLY'), ('304', 'PRO'), ('4
87', 'ASP'), ('584', 'GLU'), ('627', 'LEU'), ('937', 'GLN'), ('347', 'GLU'), ('648', 'PRO'), ('1304', 'GLU'), ('-15', 'DA'), ('829', 'TYR'), ('821', 'THR'), ('1194', 'ARG'), ('86', 'GLU'), ('-7', 'DT'), ('408', 'LYS'), ('489', 'SER'), ('516', 'LYS'), ('1257', 'GLU'), ('1099', 'GLU'), ('45', 'ASP'), ('1214', 'THR'), ('1190', 'GLY'), ('1207', 'ASP'), ('209', 'THR'), ('453', 'PRO'), ('828', 'ASP'), ('318', 'PHE'), ('914', 'LEU'), ('995', 'LEU'), ('929', 'GLN'), ('1291', 'ASN'), ('-8', 'U'), ('794', 'ARG'), ('488', 'GLU'), ('113', 'ARG'), ('183', 'GLU'), ('130', 'LYS'), ('444', 'SER'), ('671', 'GLU'), ('123', 'LYS'), ('812', 'LYS'), ('78', 'ALA'), ('-9', 'DA'), ('942', 'LYS'), ('299', 'PRO'), ('508', 'GLU'), ('886', 'SER'), ('1205', 'GLU'), ('1233', 'GLY'), ('613', 'LYS'), ('344', 'ASN'), ('1230', 'ALA'), ('7', 'DA'), ('934', 'THR'), ('1114', 'ILE'), ('804', 'GLU'), ('946', 'ASN'), ('244', 'PRO'), ('1188', 'GLU'), ('737', 'THR'), ('845', 'LEU'), ('657', 'THR'), ('447', 'HIS'), ('322', 'GLU'), ('882', 'ALA')
, ('398', 'THR'), ('1206', 'ASN'), ('2', 'THR'), ('1256', 'PRO'), ('857', 'GLU'), ('1035', 'LYS'), ('1288', 'LYS'), ('581', 'GLU'), ('499', 'ARG'), ('404', 'SER'), ('833', 'ARG'), ('491', 'GLU'), ('115', 'ASP'), ('316', 'LEU'), ('633', 'ILE'), ('587', 'SER'), ('839', 'SER'), ('1123', 'LEU'), ('411', 'ARG'), ('97', 'GLU'), ('506', 'GLU'), ('1134', 'PRO'), ('1184', 'ALA'), ('289', 'ASP'), ('586', 'THR'), ('501', 'THR'), ('851', 'THR'), ('1220', 'ARG'), ('312', 'ASP'), ('46', 'HIS'), ('941', 'GLN'), ('8', 'G'), ('703', 'GLN'), ('853', 'GLU'), ('505', 'LEU'), ('70', 'GLN'), ('287', 'LYS'), ('5', 'GLU'), ('2', 'A'), ('403', 'LYS'), ('90', 'GLU'), ('127', 'GLU'), ('445', 'HIS'), ('1105', 'HIS'), ('890', 'GLN'), ('-2', 'DT'), ('1087', 'THR'), ('395', 'SER'), ('1014', 'GLN'), ('462', 'GLU'), ('1092', 'GLU'), ('634', 'GLU'), ('314', 'ASN'), ('1096', 'HIS'), ('296', 'ALA'), ('206', 'HIS'), ('239', 'GLU'), ('848', 'ASN'), ('42', 'ALA'), ('-16', 'DA'), ('795', 'MET'), ('620', 'GLN'), ('775', 'ALA'), ('402', 'THR'),
('49', 'GLU'), ('661', 'LYS'), ('824', 'GLN'), ('697', 'SER'), ('640', 'LYS'), ('119', 'ASP'), ('392', 'ARG'), ('1013', 'GLN'), ('451', 'ASP'), ('1120', 'ASN'), ('725', 'ARG'), ('274', 'ILE'), ('357', 'ASN'), ('622', 'HIS'), ('1162', 'PRO'), ('1142', 'LYS'), ('134', 'LYS'), ('561', 'GLY'), ('397', 'LEU'), ('120', 'ALA'), ('387', 'ASN'), ('29', 'LYS'), ('1108', 'VAL'), ('860', 'LYS'), ('898', 'GLU'), ('177', 'LYS'), ('1146', 'GLN'), ('88', 'THR'), ('729', 'LYS'), ('108', 'ASP'), ('574', 'ARG'), ('1286', 'ASP'), ('415', 'HIS'), ('200', 'LYS'), ('210', 'ARG'), ('227', 'LYS'), ('228', 'ALA'), ('51', 'LYS'), ('64', 'GLN'), ('550', 'LYS'), ('370', 'LYS'), ('285', 'ILE'), ('1173', 'TYR'), ('784', 'GLN'), ('32', 'GLN'), ('1261', 'ASP'), ('6', 'U'), ('664', 'GLY'), ('-17', 'DC'), ('663', 'THR'), ('685', 'SER'), ('850', 'ILE'), ('956', 'GLN'), ('1124', 'SER'), ('732', 'MET'), ('157', 'ALA'), ('-13', 'U'), ('985', 'HIS'), ('100', 'ALA'), ('963', 'THR'), ('943', 'LYS'), ('452', 'GLN'), ('1144', 'GLU'), ('267', 'AR
G'), ('953', 'ALA'), ('724', 'GLN'), ('-19', 'DG'), ('614', 'ALA'), ('692', 'SER'), ('362', 'THR'), ('430', 'GLU'), ('427', 'ALA'), ('313', 'ARG'), ('213', 'THR'), ('536', 'GLN'), ('145', 'GLN'), ('805', 'LYS'), ('678', 'ASP'), ('1294', 'SER'), ('141', 'LYS'), ('844', 'ALA'), ('629', 'SER'), ('-14', 'C'), ('617', 'ALA'), ('429', 'LYS'), ('0', 'G'), ('755', 'HIS'), ('901', 'GLU'), ('-9', 'DC'), ('834', 'LEU'), ('220', 'GLU'), ('383', 'ASP'), ('819', 'PRO'), ('8', 'DC'), ('136', 'GLU'), ('334', 'CYS'), ('923', 'THR'), ('0', 'DC'), ('1279', 'ASN'), ('936', 'GLN'), ('1195', 'ASP'), ('253', 'THR'), ('497', 'SER'), ('582', 'PRO'), ('124', 'ARG'), ('939', 'ASP'), ('700', 'PRO'), ('460', 'LYS'), ('600', 'ASP'), ('164', 'LYS'), ('843', 'ARG'))
surfResidues= c(('588', 'GLU'), ('13', 'G'), ('72', 'ASP'), ('840', 'ASP'), ('217', 'SER'), ('571', 'GLN'), ('909', 'ARG'), ('1283', 'GLU'), ('585', 'LYS'), ('666', 'GLN'), ('331', 'GLN'), ('464', 'LYS'), ('573', 'GLY'), ('-1', 'DC'), ('950', 'GLU'), ('837', 'ASP'), ('30', 'HIS'), ('624', 'THR'), ('1010', 'ALA'), ('630', 'ASN'), ('957', 'ALA'), ('12', 'C'), ('219', 'ARG'), ('410', 'GLN'), ('528', 'VAL'), ('93', 'ASN'), ('9', 'DT'), ('341', 'ARG'), ('212', 'ILE'), ('10', 'DG'), ('576', 'LYS'), ('39', 'GLU'), ('702', 'SER'), ('596', 'ASP'), ('257', 'LEU'), ('1217', 'ALA'), ('327', 'GLU'), ('154', 'HIS'), ('9', 'G'), ('469', 'SER'), ('832', 'HIS'), ('696', 'SER'), ('-13', 'DC'), ('369', 'LYS'), ('1174', 'ARG'), ('591', 'ASP'), ('1247', 'VAL'), ('815', 'LYS'), ('883', 'ASN'), ('529', 'GLU'), ('1', 'DT'), ('216', 'PRO'), ('33', 'GLU'), ('351', 'ALA'), ('706', 'ASP'), ('60', 'THR'), ('650', 'LYS'), ('268', 'GLU'), ('1297', 'ASP'), ('38', 'GLU'), ('291', 'THR'), ('966', 'ASP'), ('530', 'LYS'), ('75', 'ASN'), ('969', 'GLN’),(‘1041', 'ASN'), ('459', 'LYS'), ('994', 'ASN'), ('1189', 'LYS'), ('793', 'SER'), ('82', 'SER'), ('143', 'LEU'), ('343', 'GLU'), ('-10', 'DA'), ('126', 'ALA'), ('360', 'ASP'), ('338', 'THR'), ('1305', 'LEU'), ('116', 'ASN'), ('270', 'GLY'), ('368', 'HIS'), ('146', 'LEU'), ('526', 'TYR'), ('1181', 'GLU'), ('667', 'LYS'), ('579', 'SER'), ('321', 'GLU'), ('104', 'ASN'), ('272', 'GLU'), ('820', 'ASP'), ('987', 'GLN'), ('1143', 'ASN'), ('688', 'THR'), ('694', 'ASP'), ('891', 'ARG'), ('855', 'SER'), ('20', 'A'), ('1067', 'ALA'), ('7', 'A'), ('350', 'GLU'), ('656', 'GLN'), ('1137', 'ASP'), ('171', 'GLY'), ('83', 'TYR'), ('562', 'LEU'), ('577', 'ALA'), ('92', 'ARG'), ('144', 'LYS'), ('524', 'LYS'), ('339', 'LEU'), ('583', 'THR'), ('174', 'GLU'), ('945', 'ASP'), ('224', 'ASN'), ('1307', 'ASN'), ('1258', 'TRP'), ('98', 'GLU'), ('827', 'TYR'), ('407', 'GLU'), ('653', 'LYS'), ('1231', 'ALA'), ('776', 'LYS'), ('1295', 'ASN'), ('1', 'MET'), ('425', 'SER'), ('547', 'ASN'), ('214', 'ALA'), ('196', 'ASP'), ('572', 'LYS'), ('81', 'ASP'), ('717', 'LEU'), ('229', 'ILE'), ('-4', 'A'), ('1030', 'ASP'), ('233', 'VAL'), ('1034', 'GLU'), ('960', 'VAL'), ('649', 'GLU'), ('927', 'LEU'), ('631', 'ASN'), ('1245', 'ASN'), ('184', 'ASP'), ('17', 'G'), ('1149', 'ALA'), ('399', 'GLY'), ('-18', 'DC'), ('835', 'SER'), ('-12', 'DG'), ('1187', 'GLU'), ('400', 'LYS'), ('1244', 'LEU'), ('319', 'ILE'), ('1', 'G'), ('56', 'ARG'), ('1032', 'PRO'), ('152', 'THR'), ('816', 'THR'), ('1192', 'VAL'), ('847', 'PRO'), ('437', 'GLN'), ('641', 'GLU'), ('153', 'GLU'), ('771', 'PRO'), ('1084', 'VAL'), ('1128', 'GLY'), ('-7', 'U'), ('463', 'GLU'), ('151', 'THR'), ('433', 'GLU'), ('297', 'SER'), ('1287', 'LEU'), ('1132', 'PHE'), ('358', 'SER'), ('675', 'LYS'), ('234', 'SER'), ('492', 'VAL'), ('1118', 'LYS'), ('293', 'HIS'), ('324', 'LYS'), ('74', 'GLU'), ('859', 'ILE'), ('101', 'THR'), ('1260', 'MET'), ('406', 'LYS'), ('67', 'GLN'), ('11', 'G'), ('1110', 'THR'), ('10', 'U'), ('494', 'PRO'), ('723', 'PHE'), ('373', 'THR'), ('419', 'ASN'), ('303', 'ILE'), ('658', 'ALA'), ('121', 'ILE'), ('681', 'ARG'), ('94', 'ALA'), ('428', 'GLY'), ('1224', 'GLN'), ('965', 'LYS'), ('1086', 'LYS'), ('621', 'THR'), ('1255', 'ASN'), ('118', 'THR'), ('662', 'LYS'), ('670', 'ARG'), ('150', 'THR'), ('509', 'PRO'), ('-12', 'A'), ('854', 'VAL'), ('96', 'ILE'), ('381', 'HIS'), ('1180', 'ASN'), ('527', 'SER'), ('1072', 'LYS'), ('354', 'ASN'), ('391', 'GLU'), ('254', 'GLN'), ('665', 'ASP'), ('342', 'ASN'), ('-9', 'C'), ('948', 'GLU'), ('170', 'SER'), ('1210', 'HIS'), ('1089', 'LYS'), ('160', 'ARG'), ('1127', 'ARG'), ('328', 'GLU'), ('68', 'LEU'), ('1285', 'LYS'), ('1153', 'PRO'), ('4', 'A'), ('841', 'GLU'), ('1147', 'PHE'), ('623', 'THR'), ('525', 'PRO'), ('3', 'A'), ('22', 'ILE'), ('887', 'LYS'), ('440', 'SER'), ('468', 'LYS'), ('736', 'GLU'), ('772', 'GLU'), ('-8', 'DC'), ('1155', 'ILE'), ('457', 'THR'), ('87', 'LYS'), ('1090', 'ASN'), ('493', 'ASP'), ('-8', 'DG'), ('1152', 'THR'), ('1053', 'ALA'), ('635', 'PRO'), ('-10', 'DC'), ('248', 'GLN'), ('752', 'LYS'), ('335', 'LYS'), ('380', 'ASP'), ('498', 'ALA'), ('1145', 'THR'), ('6', 'DG'), ('911', 'GLU'), ('396', 'GLU'), ('1033', 'ALA'), ('3', 'GLN'), ('-11', 'DC'), ('24', 'GLN'), ('139', 'ASN'), ('456', 'THR'), ('495', 'GLU'), ('19', 'C'), ('757', 'LYS'), ('651', 'GLU'), ('727', 'ALA'), ('486', 'VAL'), ('1183', 'ILE'), ('885', 'PRO'), ('925', 'LYS'), ('221', 'HIS'), ('441', 'GLU'), ('748', 'LYS'), ('448', 'ALA'), ('814', 'GLN'), ('325', 'SER'), ('163', 'ASP'), ('708', 'GLY'), ('560', 'ASN'), ('1050', 'THR'), ('28', 'LEU'), ('1232', 'THR'), ('637', 'GLU'), ('1130', 'PRO'), ('1254', 'GLN'), ('85', 'LYS'), ('465', 'GLU'), ('1109', 'LYS'), ('1121', 'ARG'), ('5', 'DG'), ('733', 'ASP'), ('466', 'ILE'), ('647', 'ASN'), ('813', 'ASP'), ('34', 'GLN'), ('1031', 'TYR'), ('1150', 'LYS'), ('161', 'SER'), ('705', 'LYS'), ('-1', 'DA'), ('1054', 'LYS'), ('156', 'ASN'), ('89', 'GLU'), ('1201', 'PRO'), ('1106', 'TYR'), ('866', 'SER'), ('290', 'GLU'), ('52', 'PRO'), ('401', 'ILE'), ('294', 'ILE'), ('949', 'LYS'), ('25', 'GLY'), ('304', 'PRO'), ('487', 'ASP'), ('584', 'GLU'), ('627', 'LEU'), ('937', 'GLN'), ('347', 'GLU'), ('648', 'PRO'), ('1304', 'GLU'), ('-15', 'DA'), ('829', 'TYR'), ('821', 'THR'), ('1194', 'ARG'), ('86', 'GLU'), ('-7', 'DT'), ('408', 'LYS'), ('489', 'SER'), ('516', 'LYS'), ('1257', 'GLU'), ('1099', 'GLU'), ('45', 'ASP'), ('1214', 'THR'), ('1190', 'GLY'), ('1207', 'ASP'), ('209', 'THR'), ('453', 'PRO'), ('828', 'ASP'), ('318', 'PHE'), ('914', 'LEU'), ('995', 'LEU'), ('929', 'GLN'), ('1291', 'ASN'), ('-8', 'U'), ('794', 'ARG'), ('488', 'GLU'), ('113', 'ARG'), ('183', 'GLU'), ('130', 'LYS'), ('444', 'SER'), ('671', 'GLU'), ('123', 'LYS'), ('812', 'LYS'), ('78', 'ALA'), ('-9', 'DA'), ('942', 'LYS'), ('299', 'PRO'), ('508', 'GLU'), ('886', 'SER'), ('1205', 'GLU'), ('1233', 'GLY'), ('613', 'LYS'), ('344', 'ASN'), ('1230', 'ALA'), ('7', 'DA'), ('934', 'THR'), ('1114', 'ILE'), ('804', 'GLU'), ('946', 'ASN'), ('244', 'PRO'), ('1188', 'GLU'), ('737', 'THR'), ('845', 'LEU'), ('657', 'THR'), ('447', 'HIS'), ('322', 'GLU'), ('882', 'ALA'), ('398', 'THR'), ('1206', 'ASN'), ('2', 'THR'), ('1256', 'PRO'), ('857', 'GLU'), ('1035', 'LYS'), ('1288', 'LYS'), ('581', 'GLU'), ('499', 'ARG'), ('404', 'SER'), ('833', 'ARG'), ('491', 'GLU'), ('115', 'ASP'), ('316', 'LEU'), ('633', 'ILE'), ('587', 'SER'), ('839', 'SER'), ('1123', 'LEU'), ('411', 'ARG'), ('97', 'GLU'), ('506', 'GLU'), ('1134', 'PRO'), ('1184', 'ALA'), ('289', 'ASP'), ('586', 'THR'), ('501', 'THR'), ('851', 'THR'), ('1220', 'ARG'), ('312', 'ASP'), ('46', 'HIS'), ('941', 'GLN'), ('8', 'G'), ('703', 'GLN'), ('853', 'GLU'), ('505', 'LEU'), ('70', 'GLN'), ('287', 'LYS'), ('5', 'GLU'), ('2', 'A'), ('403', 'LYS'), ('90', 'GLU'), ('127', 'GLU'), ('445', 'HIS'), ('1105', 'HIS'), ('890', 'GLN'), ('-2', 'DT'), ('1087', 'THR'), ('395', 'SER'), ('1014', 'GLN'), ('462', 'GLU'), ('1092', 'GLU'), ('634', 'GLU'), ('314', 'ASN'), ('1096', 'HIS'), ('296', 'ALA'), ('206', 'HIS'), ('239', 'GLU'), ('848', 'ASN'), ('42', 'ALA'), ('-16', 'DA'), ('795', 'MET'), ('620', 'GLN'), ('775', 'ALA'), ('402', 'THR'),('49', 'GLU'), ('661', 'LYS'), ('824', 'GLN'), ('697', 'SER'), ('640', 'LYS'), ('119', 'ASP'), ('392', 'ARG'), ('1013', 'GLN'), ('451', 'ASP'), ('1120', 'ASN'), ('725', 'ARG'), ('274', 'ILE'), ('357', 'ASN'), ('622', 'HIS'), ('1162', 'PRO'), ('1142', 'LYS'), ('134', 'LYS'), ('561', 'GLY'), ('397', 'LEU'), ('120', 'ALA'), ('387', 'ASN'), ('29', 'LYS'), ('1108', 'VAL'), ('860', 'LYS'), ('898', 'GLU'), ('177', 'LYS'), ('1146', 'GLN'), ('88', 'THR'), ('729', 'LYS'), ('108', 'ASP'), ('574', 'ARG'), ('1286', 'ASP'), ('415', 'HIS'), ('200', 'LYS'), ('210', 'ARG'), ('227', 'LYS'), ('228', 'ALA'), ('51', 'LYS'), ('64', 'GLN'), ('550', 'LYS'), ('370', 'LYS'), ('285', 'ILE'), ('1173', 'TYR'), ('784', 'GLN'), ('32', 'GLN'), ('1261', 'ASP'), ('6', 'U'), ('664', 'GLY'), ('-17', 'DC'), ('663', 'THR'), ('685', 'SER'), ('850', 'ILE'), ('956', 'GLN'), ('1124', 'SER'), ('732', 'MET'), ('157', 'ALA'), ('-13', 'U'), ('985', 'HIS'), ('100', 'ALA'), ('963', 'THR'), ('943', 'LYS'), ('452', 'GLN'), ('1144', 'GLU'), ('267', 'ARG'), ('953', 'ALA'), ('724', 'GLN'), ('-19', 'DG'), ('614', 'ALA'), ('692', 'SER'), ('362', 'THR'), ('430', 'GLU'), ('427', 'ALA'), ('313', 'ARG'), ('213', 'THR'), ('536', 'GLN'), ('145', 'GLN'), ('805', 'LYS'), ('678', 'ASP'), ('1294', 'SER'), ('141', 'LYS'), ('844', 'ALA'), ('629', 'SER'), ('-14', 'C'), ('617', 'ALA'), ('429', 'LYS'), ('0', 'G'), ('755', 'HIS'), ('901', 'GLU'), ('-9', 'DC'), ('834', 'LEU'), ('220', 'GLU'), ('383', 'ASP'), ('819', 'PRO'), ('8', 'DC'), ('136', 'GLU'), ('334', 'CYS'), ('923', 'THR'), ('0', 'DC'), ('1279', 'ASN'), ('936', 'GLN'), ('1195', 'ASP'), ('253', 'THR'), ('497', 'SER'), ('582', 'PRO'), ('124', 'ARG'), ('939', 'ASP'), ('700', 'PRO'), ('460', 'LYS'), ('600', 'ASP'), ('164', 'LYS'), ('843','ARG')
)
surfResidues = c(('588', 'GLU'), ('13', 'G'), ('72', 'ASP'), ('840', 'ASP'), ('217', 'SER'), ('571', 'GLN'), ('909', 'ARG'), ('1283', 'GLU'), ('585', 'LYS'), ('666', 'GLN'), ('331', 'GLN'), ('464', 'LYS'), ('573', 'GLY'), ('-1', 'DC'), ('950', 'GLU'), ('837', 'ASP'), ('30', 'HIS'), ('624', 'THR'), ('1010', 'ALA'), ('630', 'ASN'), ('957', 'ALA'), ('12', 'C'), ('219', 'ARG'), ('410', 'GLN'), ('528', 'VAL'), ('93', 'ASN'), ('9', 'DT'), ('341', 'ARG'), ('212', 'ILE'), ('10', 'DG'), ('576', 'LYS'), ('39', 'GLU'), ('702', 'SER'), ('596', 'ASP'), ('257', 'LEU'), ('1217', 'ALA'), ('327', 'GLU'), ('154', 'HIS'), ('9', 'G'), ('469', 'SER'), ('832', 'HIS'), ('696', 'SER'), ('-13', 'DC'), ('369', 'LYS'), ('1174', 'ARG'), ('591', 'ASP'), ('1247', 'VAL'), ('815', 'LYS'), ('883', 'ASN'), ('529', 'GLU'), ('1', 'DT'), ('216', 'PRO'), ('33', 'GLU'), ('351', 'ALA'), ('706', 'ASP'), ('60', 'THR'), ('650', 'LYS'), ('268', 'GLU'), ('1297', 'ASP'), ('38', 'GLU'), ('291', 'THR'), ('966', 'ASP'), ('530', 'LYS'), ('75', 'ASN'), ('969', 'GLN'), ('1041', 'ASN'), ('459', 'LYS'), ('994', 'ASN'), ('1189', 'LYS'), ('793', 'SER'), ('82', 'SER'), ('143', 'LEU'), ('343', 'GLU'), ('-10', 'DA'), ('126', 'ALA'), ('360', 'ASP'), ('338', 'THR'), ('1305', 'LEU'), ('116', 'ASN'), ('270', 'GLY'), ('368', 'HIS'), ('146', 'LEU'), ('526', 'TYR'), ('1181', 'GLU'), ('667', 'LYS'), ('579', 'SER'), ('321', 'GLU'), ('104', 'ASN'), ('272', 'GLU'), ('820', 'ASP'), ('987', 'GLN'), ('1143', 'ASN'), ('688', 'THR'), ('694', 'ASP'), ('891', 'ARG'), ('855', 'SER'), ('20', 'A'), ('1067', 'ALA'), ('7', 'A'), ('350', 'GLU'), ('656', 'GLN'), ('1137', 'ASP'), ('171', 'GLY'), ('83', 'TYR'), ('562', 'LEU'), ('577', 'ALA'), ('92', 'ARG'), ('144', 'LYS'), ('524', 'LYS'), ('339', 'LEU'), ('583', 'THR'), ('174', 'GLU'), ('945', 'ASP'), ('224', 'ASN'), ('1307', 'ASN'), ('1258', 'TRP'), ('98', 'GLU'), ('827', 'TYR'), ('407', 'GLU'), ('653', 'LYS'), ('1231', 'ALA'), ('776', 'LYS'), ('1295', 'ASN'), ('1', 'MET'), ('425', 'SER'), ('547', 'ASN'), ('214', 'ALA'), ('196', 'ASP'), ('572', 'LYS'), ('81', 'ASP'), ('717', 'LEU'), ('229', 'ILE'), ('-4', 'A'), ('1030', 'ASP'), ('233', 'VAL'), ('1034', 'GLU'), ('960', 'VAL'), ('649', 'GLU'), ('927', 'LEU'), ('631', 'ASN'), ('1245', 'ASN'), ('184', 'ASP'), ('17', 'G'), ('1149', 'ALA'), ('399', 'GLY'), ('-18', 'DC'), ('835', 'SER'), ('-12', 'DG'), ('1187', 'GLU'), ('400', 'LYS'), ('1244', 'LEU'), ('319', 'ILE'), ('1', 'G'), ('56', 'ARG'), ('1032', 'PRO'), ('152', 'THR'), ('816', 'THR'), ('1192', 'VAL'), ('847', 'PRO'), ('437', 'GLN'), ('641', 'GLU'), ('153', 'GLU'), ('771', 'PRO'), ('1084', 'VAL'), ('1128', 'GLY'), ('-7', 'U'), ('463', 'GLU'), ('151', 'THR'), ('433', 'GLU'), ('297', 'SER'), ('1287', 'LEU'), ('1132', 'PHE'), ('358', 'SER'), ('675', 'LYS'), ('234', 'SER'), ('492', 'VAL'), ('1118', 'LYS'), ('293', 'HIS'), ('324', 'LYS'), ('74', 'GLU'), ('859', 'ILE'), ('101', 'THR'), ('1260', 'MET'), ('406', 'LYS'), ('67', 'GLN'), ('11', 'G'), ('1110', 'THR'), ('10', 'U'), ('494', 'PRO'), ('723', 'PHE'), ('373', 'THR'), ('419', 'ASN'), ('303', 'ILE'), ('658', 'ALA'), ('121', 'ILE'), ('681', 'ARG'), ('94', 'ALA'), ('428', 'GLY'), ('1224', 'GLN'), ('965', 'LYS'), ('1086', 'LYS'), ('621', 'THR'), ('1255', 'ASN'), ('118', 'THR'), ('662', 'LYS'), ('670', 'ARG'), ('150', 'THR'), ('509', 'PRO'), ('-12', 'A'), ('854', 'VAL'), ('96', 'ILE'), ('381', 'HIS'), ('1180', 'ASN'), ('527', 'SER'), ('1072', 'LYS'), ('354', 'ASN'), ('391', 'GLU'), ('254', 'GLN'), ('665', 'ASP'), ('342', 'ASN'), ('-9', 'C'), ('948', 'GLU'), ('170', 'SER'), ('1210', 'HIS'), ('1089', 'LYS'), ('160', 'ARG'), ('1127', 'ARG'), ('328', 'GLU'), ('68', 'LEU'), ('1285', 'LYS'), ('1153', 'PRO'), ('4', 'A'), ('841', 'GLU'), ('1147', 'PHE'), ('623', 'THR'), ('525', 'PRO'), ('3', 'A'), ('22', 'ILE'), ('887', 'LYS'), ('440', 'SER'), ('468', 'LYS'), ('736', 'GLU'), ('772', 'GLU'), ('-8', 'DC'), ('1155', 'ILE'), ('457', 'THR'), ('87', 'LYS'), ('1090', 'ASN'), ('493', 'ASP'), ('-8', 'DG'), ('1152', 'THR'), ('1053', 'ALA'), ('635', 'PRO'), ('-10', 'DC'), ('248', 'GLN'), ('752', 'LYS'), ('335', 'LYS'), ('380', 'ASP'), ('498', 'ALA'), ('1145', 'THR'), ('6', 'DG'), ('911', 'GLU'), ('396', 'GLU'), ('1033', 'ALA'), ('3', 'GLN'), ('-11', 'DC'), ('24', 'GLN'), ('139', 'ASN'), ('456', 'THR'), ('495', 'GLU'), ('19', 'C'), ('757', 'LYS'), ('651', 'GLU'), ('727', 'ALA'), ('486', 'VAL'), ('1183', 'ILE'), ('885', 'PRO'), ('925', 'LYS'), ('221', 'HIS'), ('441', 'GLU'), ('748', 'LYS'), ('448', 'ALA'), ('814', 'GLN'), ('325', 'SER'), ('163', 'ASP'), ('708', 'GLY'), ('560', 'ASN'), ('1050', 'THR'), ('28', 'LEU'), ('1232', 'THR'), ('637', 'GLU'), ('1130', 'PRO'), ('1254', 'GLN'), ('85', 'LYS'), ('465', 'GLU'), ('1109', 'LYS'), ('1121', 'ARG'), ('5', 'DG'), ('733', 'ASP'), ('466', 'ILE'), ('647', 'ASN'), ('813', 'ASP'), ('34', 'GLN'), ('1031', 'TYR'), ('1150', 'LYS'), ('161', 'SER'), ('705', 'LYS'), ('-1', 'DA'), ('1054', 'LYS'), ('156', 'ASN'), ('89', 'GLU'), ('1201', 'PRO'), ('1106', 'TYR'), ('866', 'SER'), ('290', 'GLU'), ('52', 'PRO'), ('401', 'ILE'), ('294', 'ILE'), ('949', 'LYS'), ('25', 'GLY'), ('304', 'PRO'), ('487', 'ASP'), ('584', 'GLU'), ('627', 'LEU'), ('937', 'GLN'), ('347', 'GLU'), ('648', 'PRO'), ('1304', 'GLU'), ('-15', 'DA'), ('829', 'TYR'), ('821', 'THR'), ('1194', 'ARG'), ('86', 'GLU'), ('-7', 'DT'), ('408', 'LYS'), ('489', 'SER'), ('516', 'LYS'), ('1257', 'GLU'), ('1099', 'GLU'), ('45', 'ASP'), ('1214', 'THR'), ('1190', 'GLY'), ('1207', 'ASP'), ('209', 'THR'), ('453', 'PRO'), ('828', 'ASP'), ('318', 'PHE'), ('914', 'LEU'), ('995', 'LEU'), ('929', 'GLN'), ('1291', 'ASN'), ('-8', 'U'), ('794', 'ARG'), ('488', 'GLU'), ('113', 'ARG'), ('183', 'GLU'), ('130', 'LYS'), ('444', 'SER'), ('671', 'GLU'), ('123', 'LYS'), ('812', 'LYS'), ('78', 'ALA'), ('-9', 'DA'), ('942', 'LYS'), ('299', 'PRO'), ('508', 'GLU'), ('886', 'SER'), ('1205', 'GLU'), ('1233', 'GLY'), ('613', 'LYS'), ('344', 'ASN'), ('1230', 'ALA'), ('7', 'DA'), ('934', 'THR'), ('1114', 'ILE'), ('804', 'GLU'), ('946', 'ASN'), ('244', 'PRO'), ('1188', 'GLU'), ('737', 'THR'), ('845', 'LEU'), ('657', 'THR'), ('447', 'HIS'), ('322', 'GLU'), ('882', 'ALA'), ('398', 'THR'), ('1206', 'ASN'), ('2', 'THR'), ('1256', 'PRO'), ('857', 'GLU'), ('1035', 'LYS'), ('1288', 'LYS'), ('581', 'GLU'), ('499', 'ARG'), ('404', 'SER'), ('833', 'ARG'), ('491', 'GLU'), ('115', 'ASP'), ('316', 'LEU'), ('633', 'ILE'), ('587', 'SER'), ('839', 'SER'), ('1123', 'LEU'), ('411', 'ARG'), ('97', 'GLU'), ('506', 'GLU'), ('1134', 'PRO'), ('1184', 'ALA'), ('289', 'ASP'), ('586', 'THR'), ('501', 'THR'), ('851', 'THR'), ('1220', 'ARG'), ('312', 'ASP'), ('46', 'HIS'), ('941', 'GLN'), ('8', 'G'), ('703', 'GLN'), ('853', 'GLU'), ('505', 'LEU'), ('70', 'GLN'), ('287', 'LYS'), ('5', 'GLU'), ('2', 'A'), ('403', 'LYS'), ('90', 'GLU'), ('127', 'GLU'), ('445', 'HIS'), ('1105', 'HIS'), ('890', 'GLN'), ('-2', 'DT'), ('1087', 'THR'), ('395', 'SER'), ('1014', 'GLN'), ('462', 'GLU'), ('1092', 'GLU'), ('634', 'GLU'), ('314', 'ASN'), ('1096', 'HIS'), ('296', 'ALA'), ('206', 'HIS'), ('239', 'GLU'), ('848', 'ASN'), ('42', 'ALA'), ('-16', 'DA'), ('795', 'MET'), ('620', 'GLN'), ('775', 'ALA'), ('402', 'THR'),('49', 'GLU'), ('661', 'LYS'), ('824', 'GLN'), ('697', 'SER'), ('640', 'LYS'), ('119', 'ASP'), ('392', 'ARG'), ('1013', 'GLN'), ('451', 'ASP'), ('1120', 'ASN'), ('725', 'ARG'), ('274', 'ILE'), ('357', 'ASN'), ('622', 'HIS'), ('1162', 'PRO'), ('1142', 'LYS'), ('134', 'LYS'), ('561', 'GLY'), ('397', 'LEU'), ('120', 'ALA'), ('387', 'ASN'), ('29', 'LYS'), ('1108', 'VAL'), ('860', 'LYS'), ('898', 'GLU'), ('177', 'LYS'), ('1146', 'GLN'), ('88', 'THR'), ('729', 'LYS'), ('108', 'ASP'), ('574', 'ARG'), ('1286', 'ASP'), ('415', 'HIS'), ('200', 'LYS'), ('210', 'ARG'), ('227', 'LYS'), ('228', 'ALA'), ('51', 'LYS'), ('64', 'GLN'), ('550', 'LYS'), ('370', 'LYS'), ('285', 'ILE'), ('1173', 'TYR'), ('784', 'GLN'), ('32', 'GLN'), ('1261', 'ASP'), ('6', 'U'), ('664', 'GLY'), ('-17', 'DC'), ('663', 'THR'), ('685', 'SER'), ('850', 'ILE'), ('956', 'GLN'), ('1124', 'SER'), ('732', 'MET'), ('157', 'ALA'), ('-13', 'U'), ('985', 'HIS'), ('100', 'ALA'), ('963', 'THR'), ('943', 'LYS'), ('452', 'GLN'), ('1144', 'GLU'), ('267', 'ARG'), ('953', 'ALA'), ('724', 'GLN'), ('-19', 'DG'), ('614', 'ALA'), ('692', 'SER'), ('362', 'THR'), ('430', 'GLU'), ('427', 'ALA'), ('313', 'ARG'), ('213', 'THR'), ('536', 'GLN'), ('145', 'GLN'), ('805', 'LYS'), ('678', 'ASP'), ('1294', 'SER'), ('141', 'LYS'), ('844', 'ALA'), ('629', 'SER'), ('-14', 'C'), ('617', 'ALA'), ('429', 'LYS'), ('0', 'G'), ('755', 'HIS'), ('901', 'GLU'), ('-9', 'DC'), ('834', 'LEU'), ('220', 'GLU'), ('383', 'ASP'), ('819', 'PRO'), ('8', 'DC'), ('136', 'GLU'), ('334', 'CYS'), ('923', 'THR'), ('0', 'DC'), ('1279', 'ASN'), ('936', 'GLN'), ('1195', 'ASP'), ('253', 'THR'), ('497', 'SER'), ('582', 'PRO'), ('124', 'ARG'), ('939', 'ASP'), ('700', 'PRO'), ('460', 'LYS'), ('600', 'ASP'), ('164', 'LYS'), ('843', 'ARG'))
surfResidues = "('588', 'GLU'), ('13', 'G'), ('72', 'ASP'), ('840', 'ASP'), ('217', 'SER'), ('571', 'GLN'), ('909', 'ARG'), ('1283', 'GLU'), ('585', 'LYS'), ('666', 'GLN'), ('331', 'GLN'), ('464', 'LYS'), ('573', 'GLY'), ('-1', 'DC'), ('950', 'GLU'), ('837', 'ASP'), ('30', 'HIS'), ('624', 'THR'), ('1010', 'ALA'), ('630', 'ASN'), ('957', 'ALA'), ('12', 'C'), ('219', 'ARG'), ('410', 'GLN'), ('528', 'VAL'), ('93', 'ASN'), ('9', 'DT'), ('341', 'ARG'), ('212', 'ILE'), ('10', 'DG'), ('576', 'LYS'), ('39', 'GLU'), ('702', 'SER'), ('596', 'ASP'), ('257', 'LEU'), ('1217', 'ALA'), ('327', 'GLU'), ('154', 'HIS'), ('9', 'G'), ('469', 'SER'), ('832', 'HIS'), ('696', 'SER'), ('-13', 'DC'), ('369', 'LYS'), ('1174', 'ARG'), ('591', 'ASP'), ('1247', 'VAL'), ('815', 'LYS'), ('883', 'ASN'), ('529', 'GLU'), ('1', 'DT'), ('216', 'PRO'), ('33', 'GLU'), ('351', 'ALA'), ('706', 'ASP'), ('60', 'THR'), ('650', 'LYS'), ('268', 'GLU'), ('1297', 'ASP'), ('38', 'GLU'), ('291', 'THR'), ('966', 'ASP'), ('530', 'LYS'), ('75', 'ASN'), ('969', 'GLN'), ('1041', 'ASN'), ('459', 'LYS'), ('994', 'ASN'), ('1189', 'LYS'), ('793', 'SER'), ('82', 'SER'), ('143', 'LEU'), ('343', 'GLU'), ('-10', 'DA'), ('126', 'ALA'), ('360', 'ASP'), ('338', 'THR'), ('1305', 'LEU'), ('116', 'ASN'), ('270', 'GLY'), ('368', 'HIS'), ('146', 'LEU'), ('526', 'TYR'), ('1181', 'GLU'), ('667', 'LYS'), ('579', 'SER'), ('321', 'GLU'), ('104', 'ASN'), ('272', 'GLU'), ('820', 'ASP'), ('987', 'GLN'), ('1143', 'ASN'), ('688', 'THR'), ('694', 'ASP'), ('891', 'ARG'), ('855', 'SER'), ('20', 'A'), ('1067', 'ALA'), ('7', 'A'), ('350', 'GLU'), ('656', 'GLN'), ('1137', 'ASP'), ('171', 'GLY'), ('83', 'TYR'), ('562', 'LEU'), ('577', 'ALA'), ('92', 'ARG'), ('144', 'LYS'), ('524', 'LYS'), ('339', 'LEU'), ('583', 'THR'), ('174', 'GLU'), ('945', 'ASP'), ('224', 'ASN'), ('1307', 'ASN'), ('1258', 'TRP'), ('98', 'GLU'), ('827', 'TYR'), ('407', 'GLU'), ('653', 'LYS'), ('1231', 'ALA'), ('776', 'LYS'), ('1295', 'ASN'), ('1', 'MET'), ('425', 'SER'), ('547', 'ASN'), ('214', 'ALA'), ('196', 'ASP'), ('572', 'LYS'), ('81', 'ASP'), ('717', 'LEU'), ('229', 'ILE'), ('-4', 'A'), ('1030', 'ASP'), ('233', 'VAL'), ('1034', 'GLU'), ('960', 'VAL'), ('649', 'GLU'), ('927', 'LEU'), ('631', 'ASN'), ('1245', 'ASN'), ('184', 'ASP'), ('17', 'G'), ('1149', 'ALA'), ('399', 'GLY'), ('-18', 'DC'), ('835', 'SER'), ('-12', 'DG'), ('1187', 'GLU'), ('400', 'LYS'), ('1244', 'LEU'), ('319', 'ILE'), ('1', 'G'), ('56', 'ARG'), ('1032', 'PRO'), ('152', 'THR'), ('816', 'THR'), ('1192', 'VAL'), ('847', 'PRO'), ('437', 'GLN'), ('641', 'GLU'), ('153', 'GLU'), ('771', 'PRO'), ('1084', 'VAL'), ('1128', 'GLY'), ('-7', 'U'), ('463', 'GLU'), ('151', 'THR'), ('433', 'GLU'), ('297', 'SER'), ('1287', 'LEU'), ('1132', 'PHE'), ('358', 'SER'), ('675', 'LYS'), ('234', 'SER'), ('492', 'VAL'), ('1118', 'LYS'), ('293', 'HIS'), ('324', 'LYS'), ('74', 'GLU'), ('859', 'ILE'), ('101', 'THR'), ('1260', 'MET'), ('406', 'LYS'), ('67', 'GLN'), ('11', 'G'), ('1110', 'THR'), ('10', 'U'), ('494', 'PRO'), ('723', 'PHE'), ('373', 'THR'), ('419', 'ASN'), ('303', 'ILE'), ('658', 'ALA'), ('121', 'ILE'), ('681', 'ARG'), ('94', 'ALA'), ('428', 'GLY'), ('1224', 'GLN'), ('965', 'LYS'), ('1086', 'LYS'), ('621', 'THR'), ('1255', 'ASN'), ('118', 'THR'), ('662', 'LYS'), ('670', 'ARG'), ('150', 'THR'), ('509', 'PRO'), ('-12', 'A'), ('854', 'VAL'), ('96', 'ILE'), ('381', 'HIS'), ('1180', 'ASN'), ('527', 'SER'), ('1072', 'LYS'), ('354', 'ASN'), ('391', 'GLU'), ('254', 'GLN'), ('665', 'ASP'), ('342', 'ASN'), ('-9', 'C'), ('948', 'GLU'), ('170', 'SER'), ('1210', 'HIS'), ('1089', 'LYS'), ('160', 'ARG'), ('1127', 'ARG'), ('328', 'GLU'), ('68', 'LEU'), ('1285', 'LYS'), ('1153', 'PRO'), ('4', 'A'), ('841', 'GLU'), ('1147', 'PHE'), ('623', 'THR'), ('525', 'PRO'), ('3', 'A'), ('22', 'ILE'), ('887', 'LYS'), ('440', 'SER'), ('468', 'LYS'), ('736', 'GLU'), ('772', 'GLU'), ('-8', 'DC'), ('1155', 'ILE'), ('457', 'THR'), ('87', 'LYS'), ('1090', 'ASN'), ('493', 'ASP'), ('-8', 'DG'), ('1152', 'THR'), ('1053', 'ALA'), ('635', 'PRO'), ('-10', 'DC'), ('248', 'GLN'), ('752', 'LYS'), ('335', 'LYS'), ('380', 'ASP'), ('498', 'ALA'), ('1145', 'THR'), ('6', 'DG'), ('911', 'GLU'), ('396', 'GLU'), ('1033', 'ALA'), ('3', 'GLN'), ('-11', 'DC'), ('24', 'GLN'), ('139', 'ASN'), ('456', 'THR'), ('495', 'GLU'), ('19', 'C'), ('757', 'LYS'), ('651', 'GLU'), ('727', 'ALA'), ('486', 'VAL'), ('1183', 'ILE'), ('885', 'PRO'), ('925', 'LYS'), ('221', 'HIS'), ('441', 'GLU'), ('748', 'LYS'), ('448', 'ALA'), ('814', 'GLN'), ('325', 'SER'), ('163', 'ASP'), ('708', 'GLY'), ('560', 'ASN'), ('1050', 'THR'), ('28', 'LEU'), ('1232', 'THR'), ('637', 'GLU'), ('1130', 'PRO'), ('1254', 'GLN'), ('85', 'LYS'), ('465', 'GLU'), ('1109', 'LYS'), ('1121', 'ARG'), ('5', 'DG'), ('733', 'ASP'), ('466', 'ILE'), ('647', 'ASN'), ('813', 'ASP'), ('34', 'GLN'), ('1031', 'TYR'), ('1150', 'LYS'), ('161', 'SER'), ('705', 'LYS'), ('-1', 'DA'), ('1054', 'LYS'), ('156', 'ASN'), ('89', 'GLU'), ('1201', 'PRO'), ('1106', 'TYR'), ('866', 'SER'), ('290', 'GLU'), ('52', 'PRO'), ('401', 'ILE'), ('294', 'ILE'), ('949', 'LYS'), ('25', 'GLY'), ('304', 'PRO'), ('487', 'ASP'), ('584', 'GLU'), ('627', 'LEU'), ('937', 'GLN'), ('347', 'GLU'), ('648', 'PRO'), ('1304', 'GLU'), ('-15', 'DA'), ('829', 'TYR'), ('821', 'THR'), ('1194', 'ARG'), ('86', 'GLU'), ('-7', 'DT'), ('408', 'LYS'), ('489', 'SER'), ('516', 'LYS'), ('1257', 'GLU'), ('1099', 'GLU'), ('45', 'ASP'), ('1214', 'THR'), ('1190', 'GLY'), ('1207', 'ASP'), ('209', 'THR'), ('453', 'PRO'), ('828', 'ASP'), ('318', 'PHE'), ('914', 'LEU'), ('995', 'LEU'), ('929', 'GLN'), ('1291', 'ASN'), ('-8', 'U'), ('794', 'ARG'), ('488', 'GLU'), ('113', 'ARG'), ('183', 'GLU'), ('130', 'LYS'), ('444', 'SER'), ('671', 'GLU'), ('123', 'LYS'), ('812', 'LYS'), ('78', 'ALA'), ('-9', 'DA'), ('942', 'LYS'), ('299', 'PRO'), ('508', 'GLU'), ('886', 'SER'), ('1205', 'GLU'), ('1233', 'GLY'), ('613', 'LYS'), ('344', 'ASN'), ('1230', 'ALA'), ('7', 'DA'), ('934', 'THR'), ('1114', 'ILE'), ('804', 'GLU'), ('946', 'ASN'), ('244', 'PRO'), ('1188', 'GLU'), ('737', 'THR'), ('845', 'LEU'), ('657', 'THR'), ('447', 'HIS'), ('322', 'GLU'), ('882', 'ALA'), ('398', 'THR'), ('1206', 'ASN'), ('2', 'THR'), ('1256', 'PRO'), ('857', 'GLU'), ('1035', 'LYS'), ('1288', 'LYS'), ('581', 'GLU'), ('499', 'ARG'), ('404', 'SER'), ('833', 'ARG'), ('491', 'GLU'), ('115', 'ASP'), ('316', 'LEU'), ('633', 'ILE'), ('587', 'SER'), ('839', 'SER'), ('1123', 'LEU'), ('411', 'ARG'), ('97', 'GLU'), ('506', 'GLU'), ('1134', 'PRO'), ('1184', 'ALA'), ('289', 'ASP'), ('586', 'THR'), ('501', 'THR'), ('851', 'THR'), ('1220', 'ARG'), ('312', 'ASP'), ('46', 'HIS'), ('941', 'GLN'), ('8', 'G'), ('703', 'GLN'), ('853', 'GLU'), ('505', 'LEU'), ('70', 'GLN'), ('287', 'LYS'), ('5', 'GLU'), ('2', 'A'), ('403', 'LYS'), ('90', 'GLU'), ('127', 'GLU'), ('445', 'HIS'), ('1105', 'HIS'), ('890', 'GLN'), ('-2', 'DT'), ('1087', 'THR'), ('395', 'SER'), ('1014', 'GLN'), ('462', 'GLU'), ('1092', 'GLU'), ('634', 'GLU'), ('314', 'ASN'), ('1096', 'HIS'), ('296', 'ALA'), ('206', 'HIS'), ('239', 'GLU'), ('848', 'ASN'), ('42', 'ALA'), ('-16', 'DA'), ('795', 'MET'), ('620', 'GLN'), ('775', 'ALA'), ('402', 'THR'),('49', 'GLU'), ('661', 'LYS'), ('824', 'GLN'), ('697', 'SER'), ('640', 'LYS'), ('119', 'ASP'), ('392', 'ARG'), ('1013', 'GLN'), ('451', 'ASP'), ('1120', 'ASN'), ('725', 'ARG'), ('274', 'ILE'), ('357', 'ASN'), ('622', 'HIS'), ('1162', 'PRO'), ('1142', 'LYS'), ('134', 'LYS'), ('561', 'GLY'), ('397', 'LEU'), ('120', 'ALA'), ('387', 'ASN'), ('29', 'LYS'), ('1108', 'VAL'), ('860', 'LYS'), ('898', 'GLU'), ('177', 'LYS'), ('1146', 'GLN'), ('88', 'THR'), ('729', 'LYS'), ('108', 'ASP'), ('574', 'ARG'), ('1286', 'ASP'), ('415', 'HIS'), ('200', 'LYS'), ('210', 'ARG'), ('227', 'LYS'), ('228', 'ALA'), ('51', 'LYS'), ('64', 'GLN'), ('550', 'LYS'), ('370', 'LYS'), ('285', 'ILE'), ('1173', 'TYR'), ('784', 'GLN'), ('32', 'GLN'), ('1261', 'ASP'), ('6', 'U'), ('664', 'GLY'), ('-17', 'DC'), ('663', 'THR'), ('685', 'SER'), ('850', 'ILE'), ('956', 'GLN'), ('1124', 'SER'), ('732', 'MET'), ('157', 'ALA'), ('-13', 'U'), ('985', 'HIS'), ('100', 'ALA'), ('963', 'THR'), ('943', 'LYS'), ('452', 'GLN'), ('1144', 'GLU'), ('267', 'ARG'), ('953', 'ALA'), ('724', 'GLN'), ('-19', 'DG'), ('614', 'ALA'), ('692', 'SER'), ('362', 'THR'), ('430', 'GLU'), ('427', 'ALA'), ('313', 'ARG'), ('213', 'THR'), ('536', 'GLN'), ('145', 'GLN'), ('805', 'LYS'), ('678', 'ASP'), ('1294', 'SER'), ('141', 'LYS'), ('844', 'ALA'), ('629', 'SER'), ('-14', 'C'), ('617', 'ALA'), ('429', 'LYS'), ('0', 'G'), ('755', 'HIS'), ('901', 'GLU'), ('-9', 'DC'), ('834', 'LEU'), ('220', 'GLU'), ('383', 'ASP'), ('819', 'PRO'), ('8', 'DC'), ('136', 'GLU'), ('334', 'CYS'), ('923', 'THR'), ('0', 'DC'), ('1279', 'ASN'), ('936', 'GLN'), ('1195', 'ASP'), ('253', 'THR'), ('497', 'SER'), ('582', 'PRO'), ('124', 'ARG'), ('939', 'ASP'), ('700', 'PRO'), ('460', 'LYS'), ('600', 'ASP'), ('164', 'LYS'), ('843', 'ARG')"
khjhoh
..
..
""
''
,
,
//
\\
stop
+
=/
library(dplyr)
setwd("~/Desktop/COVID-19 Dx")
surfRes = read.csv(file.choose(), header = TRUE)
badMuts = read.csv(file.choose(), header =TRUE)
surfRes = read.csv(file.choose(), header = TRUE)
potentialSites = dplyr::setdiff(surfRes, badMuts)
potentialSites = dplyr::setdiff(surfRes$Position, badMuts)
nrow(potentialSites)
View(potentialSites)
View(surfRes)
potentialSites = dplyr::setdiff(surfRes$Position, badMuts$Position)
potentialSites = dplyr::setdiff(surfRes$Position, badMuts$Position)
potentialSites = data.frame(dplyr::setdiff(surfRes$Position, badMuts$Position))
colnames(potentialSites) = "Positions"
potentialSitesWithResidue = dplyr::left_join(potentialSites,surfRes)
potentialSitesWithResidue = dplyr::left_join(potentialSites,surfRes,by="Position")
colnames(potentialSites) = "Position"
potentialSitesWithResidue = dplyr::left_join(potentialSites,surfRes,by="Position")
View(potentialSitesWithResidue)
potentialSitesWithResidue = potentialSites%>%
dplyr::left_join(surfRes,by="Position")%>%
dplyr::filter(Residue == "PHE" || "TYR")
potentialSitesWithResidue = potentialSites%>%
dplyr::left_join(surfRes,by="Position")%>%
dplyr::filter(Residue == "PHE" || Residue == "TYR")
potentialSitesWithResidue = potentialSites%>%
dplyr::left_join(surfRes,by="Position")%>%
dplyr::filter(Residue == "PHE")
potentialSitesWithResidue = potentialSites%>%
dplyr::left_join(surfRes,by="Position")%>%
dplyr::filter(Residue == "TYR")
potentialSitesWithResidue = potentialSites%>%
dplyr::left_join(surfRes,by="Position")%>%
dplyr::filter(Residue == "TYR" || "PHE")
potentialSitesWithResidue = potentialSites%>%
dplyr::left_join(surfRes,by="Position")%>%
dplyr::filter(Residue == "TYR || PHE")
potentialSitesWithResidue = potentialSites%>%
dplyr::left_join(surfRes,by="Position")%>%
dplyr::filter(Residue == "TYR" | "PHE")
potentialSitesWithResidue = potentialSites%>%
dplyr::left_join(surfRes,by="Position")%>%
dplyr::filter(Residue == "TYR" && Residue == "PHE")
potentialSitesWithResidue = potentialSites%>%
dplyr::left_join(surfRes,by="Position")%>%
dplyr::filter(Residue == "TYR" & Residue == "PHE")
potentialSitesWithResidue = potentialSites%>%
dplyr::left_join(surfRes,by="Position")%>%
dplyr::filter(Residue %in% c("PHE","TYR"))
write.csv(potentialSitesWithResidue, "AsCas12a Potential nsAA Incorporation Sites.csv")
library(devtools)
library(roxygen2)
document()
document()
setwd(..)
setwd("..")
pwd
pwd()
install("Spacer2PAM")
setwd("~/Desktop/Spacer2PAM Dummy Data")
spacerDF = read.csv(file = "Bacillus halodurans C-125 spacers with repeat.csv", header = TRUE)
View(spacerDF)
setCRISPRInfo(genus = "Bacillus", species = "halodurans", strain = "C-125", crisprSystemNumber = 1)
df2fasta(spacerDF)
#Generate a properly formatted data frame from the alignment CSV file
alignmentCSV2DF(alignmentFile = "b halodurans C-125-Alignment-HitTable.csv")
#Generate a properly formatted data frame from the alignment CSV file
alignmentDF = alignmentCSV2DF(alignmentFile = "b halodurans C-125-Alignment-HitTable.csv")
View(alignmentDF)
#Generate a properly formatted data frame from the alignment CSV file
alignmentDF = alignmentCSV2DF(alignmentFile = "B halodurans C-125-Alignment-HitTable.csv")
View(alignmentDF)
#Join the data frames containing the spacer data and alignment data
joinSpacerDFandAlignmentDF(alignmentDF = alignmentDF, spacerDF = spacerDF, accessionDatabaseLocation = file.choose())
View(joineddata)
#Submit the accession numbers of all alignment hits to Phaster for prophage prediction.
#This step is optional as a similar function will be run as part of the join2PAM function.
#Run time for this function varies by the number of accession numbers submitted, whether those accession numbers have been submitted previously, and the current traffic on the Phaster server.
submit2Phaster()
#Predict PAM sequences from the joined spacer and alignment data frames.
#This function defaults to filter criteria optimized for both PAM accuracy, PAM score, and minimized run time.
#These filter criteria can be toggled and will produce different results.
join2PAM(joinedData = joineddata)
devtools::use_vignette("Spacer2PAM Vignette")
usethis::use_vignette("Spacer2PAM Vignette")
setwd("~/Desktop/Spacer2PAM")
usethis::use_vignette("Spacer2PAM Vignette")
usethis::use_vignette("Spacer2PAM-Vignette")
R.Version()
R.Version()
install.packages("knitr")
install.packages("devtools")
library(devtools)
library(roxygen2)
install("Spacer2PAM")
setwd("..")
install("Spacer2PAM")
library(Spacer2PAM)
setwd("~/Desktop/Spacer2PAM Dummy Data")
cd()
pwd()
wd()
install("Spacer2PAM")
setwd("~/Desktop")
install("Spacer2PAM")
library(roxygen2)
setwd("~/Desktop/Spacer2PAM")
document()
setwd("~/Desktop")
install("Spacer2PAM")
.rs.restartR()
View(head(system.file("extdata",
"Bacillus halodurans C-125 System 1 spacers.fasta",
package="Spacer2PAM"))
)
View(system.file("extdata",
"Bacillus halodurans C-125 System 1 spacers.fasta",
package="Spacer2PAM"))
system.file("extdata",
"Bacillus halodurans C-125 System 1 spacers.fasta",
package="Spacer2PAM")
read.fasta(system.file("extdata",
+                                        "Bacillus halodurans C-125 System 1 spacers.fasta",
+                                        package="Spacer2PAM"))
read.fasta(system.file("extdata", "Bacillus halodurans C-125 System 1 spacers.fasta", package="Spacer2PAM"))
View(read.fasta(system.file("extdata", "Bacillus halodurans C-125 System 1 spacers.fasta", package="Spacer2PAM")))
#Enter CRISPR system information to be used for naming files.
setCRISPRInfo(genus = "Bacillus", species = "halodurans", strain = "C-125", crisprSystemNumber = 1)
#Load a CSV file containing CRISPR system spacers as a data frame.
spacerDF = read.csv(file = "Bacillus halodurans C-125 spacers with repeat.csv", header = TRUE)
#Load a CSV file containing CRISPR system spacers as a data frame.
spacerDF = read.csv(file = file.choose(), header = TRUE)
#Generate a properly formatted data frame from the alignment CSV file.
alignmentDF = alignmentCSV2DF(alignmentFile = file.choose())
#Join the data frames containing the spacer data and alignment data.
#This step requires the preparation of the taxonimizr package. Details can be found at https://cran.r-project.org/web/packages/taxonomizr/vignettes/usage.html.
#Depending on the size of each data frame and the diversity of alignment hits, this step may take some time to complete.
joinSpacerDFandAlignmentDF(alignmentDF = alignmentDF, spacerDF = spacerDF, accessionDatabaseLocation = file.choose())
setwd("~/Desktop/Spacer2PAM Dummy Data")
join2PAM(joinedData = joineddata, e.valueRange = c(0.01,0.05,0.1,0.5,1),flankLength = 5)
join2PAM(joinedData = joineddata, e.valueRange = c(0.01,0.05,0.1,0.5,1),flankLength = 5)
join2PAM(joinedData = joineddata, nucleotidesShorterThanProtospacerRange = c(0,1,2,5,7),flankLength = 5)
write.csv(collectionFrame, file = "Bacillus halodurans C-125 collectionFrame.csv")
setwd("~/Desktop")
install("Spacer2PAM")
install("Spacer2PAM")
setwd("~/Desktop/Spacer2PAM")
document()
setwd("~/Desktop")
install("Spacer2PAM")
join2PAM(joinedData = joineddata, nucleotidesShorterThanProtospacerRange = c(0,1,2,5,7),flankLength = 5)
join2PAM(joinedData = joineddata, nucleotidesShorterThanProtospacerRange = c(0,1,2,5,7),flankLength = 5)
setwd("~/Desktop/Spacer2PAM Dummy Data")
write.csv(collectionFrame, file = "Bacillus halodurans C-125 collectionFrame.csv")
setwd("~/Desktop")
install("Spacer2PAM")
install.packages("chron")
setwd("/Volumes/JEWETTLAB/Personal Data/GAR/Experiments/Covid-19 Dx")
library(dplyr)
library(ggplot2)
library(chron)
dataFile = read.csv("20200623 HPV target AsCas12a LbaCas12a Comparison processed.csv", header = TRUE)
groupedFile = dataFile%>%
dplyr::group_by(Condition,Cas,Target,Time)%>%
dplyr::summarise(avg = mean(RFU), sd = sd(RFU))%>%
dplyr::mutate(low = avg-sd, high =avg+sd, Minutes = 60 * 24 * as.numeric(times(Time)))
ggplot(data = groupedFile, aes(x=Minutes, y=avg, color= Target))+geom_point()+facet_wrap(Cas~)+geom_errorbar(aes(ymin = low, ymax = high))+xlab("Time (minutes)")+ylab("Fluorescence (a.u.)")
ggplot(data = groupedFile, aes(x=Minutes, y=avg, color= Target))+geom_point()+facet_wrap(Cas~.)+geom_errorbar(aes(ymin = low, ymax = high))+xlab("Time (minutes)")+ylab("Fluorescence (a.u.)")
library(Spacer2PAM)
setwd("~/Desktop/Spacer2PAM Paper Data")
#Enter CRISPR system information to be used for naming files.
setCRISPRInfo(genus = "Escherichia", species = "coli", strain = "MG1655", crisprSystemNumber = 1)
#Load a CSV file containing CRISPR system spacers as a data frame.
spacerDF = read.csv(file = file.choose(), header = TRUE)
#Generate a properly formatted data frame from the alignment CSV file.
alignmentDF = alignmentCSV2DF(alignmentFile = file.choose())
#Join the data frames containing the spacer data and alignment data.
#This step requires the preparation of the taxonimizr package. Details can be found at https://cran.r-project.org/web/packages/taxonomizr/vignettes/usage.html.
#Depending on the size of each data frame and the diversity of alignment hits, this step may take some time to complete.
joinSpacerDFandAlignmentDF(alignmentDF = alignmentDF, spacerDF = spacerDF, accessionDatabaseLocation = file.choose())
rlang::last_error()
rlang::last_error()
#Join the data frames containing the spacer data and alignment data.
#This step requires the preparation of the taxonimizr package. Details can be found at https://cran.r-project.org/web/packages/taxonomizr/vignettes/usage.html.
#Depending on the size of each data frame and the diversity of alignment hits, this step may take some time to complete.
joinSpacerDFandAlignmentDF(alignmentDF = alignmentDF, spacerDF = spacerDF, accessionDatabaseLocation = file.choose())
#Join the data frames containing the spacer data and alignment data.
#This step requires the preparation of the taxonimizr package. Details can be found at https://cran.r-project.org/web/packages/taxonomizr/vignettes/usage.html.
#Depending on the size of each data frame and the diversity of alignment hits, this step may take some time to complete.
joinSpacerDFandAlignmentDF(alignmentDF = alignmentDF, spacerDF = spacerDF, accessionDatabaseLocation = file.choose())
#Join the data frames containing the spacer data and alignment data.
#This step requires the preparation of the taxonimizr package. Details can be found at https://cran.r-project.org/web/packages/taxonomizr/vignettes/usage.html.
#Depending on the size of each data frame and the diversity of alignment hits, this step may take some time to complete.
joinSpacerDFandAlignmentDF(alignmentDF = alignmentDF, spacerDF = spacerDF, accessionDatabaseLocation = file.choose())
#Join the data frames containing the spacer data and alignment data.
#This step requires the preparation of the taxonimizr package. Details can be found at https://cran.r-project.org/web/packages/taxonomizr/vignettes/usage.html.
#Depending on the size of each data frame and the diversity of alignment hits, this step may take some time to complete.
joinSpacerDFandAlignmentDF(alignmentDF = alignmentDF, spacerDF = spacerDF, accessionDatabaseLocation = file.choose())
#Join the data frames containing the spacer data and alignment data.
#This step requires the preparation of the taxonimizr package. Details can be found at https://cran.r-project.org/web/packages/taxonomizr/vignettes/usage.html.
#Depending on the size of each data frame and the diversity of alignment hits, this step may take some time to complete.
joinSpacerDFandAlignmentDF(alignmentDF = alignmentDF, spacerDF = spacerDF, accessionDatabaseLocation = file.choose())
#Join the data frames containing the spacer data and alignment data.
#This step requires the preparation of the taxonimizr package. Details can be found at https://cran.r-project.org/web/packages/taxonomizr/vignettes/usage.html.
#Depending on the size of each data frame and the diversity of alignment hits, this step may take some time to complete.
joinSpacerDFandAlignmentDF(alignmentDF = alignmentDF, spacerDF = spacerDF, accessionDatabaseLocation = file.choose())
#Predict PAM sequences from the joined spacer and alignment data frames.
#This function defaults to filter criteria optimized for both PAM accuracy, PAM score, and minimized run time.
#These filter criteria can be toggled and will produce different results.
#This function can also iterate over a range of filter criteria.
#Run time for this function varies by which filter criteria are selected, number of alignments imput, and number of predictions generated.
join2PAM(joinedData = joineddata)
View(joineddata)
View(collectionFrame)
join2PAM(joinedData = joineddata, savePAMSeqs = T)
upstreamPAMSeqs
summary(upstreamPAMSeqs)
table(upstreamPAMSeqs)
table(downstreamPAMSeqs)
join2PAM(joinedData = joineddata, e.valueRange = c(0.01,0.05,0.5), nucleotidesShorterThanProtospacerRange = c(0,2,4))
setwd("~/Desktop/Spacer2PAM")
